apply from: "https://raw.githubusercontent.com/SteveKunG/GradleScripts/main/architectury/neoforge.gradle"

loom {
    runs.configureEach {
        properties project.commonProperties
        vmArgs project.commonVmArgs
        vmArgs project.hotswapVmArgs
    }

    runs {
        client {
            if (project.hasProperty("usernameAndUUID")) {
                programArgs project.usernameAndUUID
            }
        }
        data {
            forgeTemplate("data")
            environment "data"
            programArgs "--mod=fishofthieves", "--all", "--output=" + file("src/generated/resources/"), "--existing=" + project(":common").file("src/main/resources/")
            name "NeoForge Data Generation"
        }
    }
}

repositories {
    maven {
        name "Aquaculture 2"
        url "https://girafi.dk/maven/"
        content {
            includeGroup "com.teammetallurgy.aquaculture"
        }
    }
    maven {
        name "ForgifiedFabricAPI"
        url "https://maven.su5ed.dev/releases"
    }
}

dependencies {
    api "com.teammetallurgy.aquaculture:aquaculture2_1.21:${aquaculture_version}:api"

    include modApi("org.sinytra.forgified-fabric-api:fabric-api-base:0.4.42+d1308dedd1"){ exclude group: "fabric-api" }
    include modApi("org.sinytra.forgified-fabric-api:fabric-resource-loader-v0:1.1.5+0a0c14ffd1"){ exclude group: "fabric-api" }
    include modApi("org.sinytra.forgified-fabric-api:fabric-loot-api-v3:1.0.0+333dfad9d1"){ exclude group: "fabric-api" }
}

processResources {
    delete {
        delete "${projectDir}/src/main/resources/simple_spawning_condition_pack"
    }
    copy {
        from("../common/src/generated/resources/resourcepacks")
        into("$projectDir/src/main/resources")
    }
}

String fileName = "${archives_base_name}-mc${minecraft_version}"
List<String> commonExcludes = [".cache", "**/datagen/", "**/resourcepacks/", "data/fabric/**", "architectury.common.json"]

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    excludes = commonExcludes
}

sourcesJar {
    Jar commonSources = project(":common").sourcesJar
    dependsOn commonSources
    commonSources.exclude ".cache"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
    excludes = commonExcludes
}

tasks.register("apiJar", Jar) {
    group "build"
    from project(":common").sourceSets.main.allJava
    from project(":common").sourceSets.main.output
    include "com/stevekung/fishofthieves/api/**/*"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    archiveClassifier = "api"
}

artifacts {
    archives apiJar
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge" + (project.release_type != "release" ? "-" + project.release_type : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}