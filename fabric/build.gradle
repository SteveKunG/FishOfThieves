architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    launches {
        if (project.hasProperty("username") && project.hasProperty("uuid")) {
            client {
                arg "--username", "${username}", "--uuid", "${uuid}"
            }
        }
    }

    runs {
        client {
            vmArg("-Dmixin.debug.export=true")
            vmArg("-Dmixin.hotSwap=true")
        }
        datagen {
            server()
            name "Fabric Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/generated/resources")}"
            runDir "build/datagen"
        }
    }

    mixin {
        defaultRefmapName = "mixins.fishofthieves_fabric.refmap.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name "ModMenu Maven"
        url "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

String fileName = "${archives_base_name}-mc${mc_version}"

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "568372"
            changelog = file("../CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion "Fabric"
            addGameVersion "Java 17"
            addGameVersion project.mc_version

            mainArtifact(remapJar.archiveFile) {
                displayName = "[Fabric] " + fileName + "-v${project.version}"
            }
            relations {
                requiredDependency "fabric-api"
                requiredDependency "cloth-config"
                optionalDependency "modmenu"
                optionalDependency "canvas-renderer"
            }
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

modrinth {
    if (project.hasProperty("modrinth_api_token")) {
        token = project.modrinth_api_token
        projectId = "fish-of-thieves"
        changelog = file("../CHANGE_LOG.md").text
        versionName = "[Fabric] " + fileName + "-v${project.version}"
        versionNumber = project.mod_version + "-fabric"
        versionType = "release"
        uploadFile = remapJar
        gameVersions = ["${project.mc_version}"]
        loaders = ["fabric"]
        dependencies {
            required.project "fabric-api"
            required.project "cloth-config"
            optional.project "modmenu"
            optional.project "canvas"
        }
    }
}

task curseforgeModrinth(dependsOn: [ build, "modrinth", "curseforge" ], group: "upload")