apply from: "https://raw.githubusercontent.com/SteveKunG/GradleScripts/main/architectury/fabric.gradle"

sourceSets {
    gametest {
        runtimeClasspath += main.runtimeClasspath + main.output
        compileClasspath += main.compileClasspath + main.output
    }
}

loom {
    runs.configureEach {
        properties project.commonProperties
        vmArgs project.commonVmArgs
        vmArgs project.hotswapVmArgs
    }

    runs {
        client {
            if (project.hasProperty("usernameAndUUID")) {
                programArgs project.usernameAndUUID
            }
        }
        gametest {
            if (project.hasProperty("usernameAndUUID")) {
                programArgs project.usernameAndUUID
            }
            client()
            name "Game Test Client"
            source sourceSets.gametest
            vmArg "-Dfabric-api.gametest"
        }
        datagen {
            server()
            name "Fabric Data Generation"
            property "fabric-api.datagen"
            property "fabric-api.datagen.output-dir", "${project(":common").file("src/generated/resources")}"
            runDir "build/datagen"
        }
    }
}

dependencies {
    //TODO modRuntimeOnly "maven.modrinth:continuity:${continuity_version}"
}

processResources {
    delete {
        delete "${projectDir}/src/main/resources/resourcepacks/simple_spawning_condition_pack"
    }
    copy {
        from("../common/src/generated/resources/resourcepacks")
        into("$projectDir/src/main/resources/resourcepacks")
    }
}

String fileName = "${archives_base_name}-mc${minecraft_version}"
List<String> devExcludes = ["**/gametest/", "**/datagen/", "architectury.common.json"]

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    excludes = devExcludes
}

sourcesJar {
    Jar commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    excludes = devExcludes
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

tasks.register("apiJar", Jar) {
    group "build"
    from project(":common").sourceSets.main.allJava
    from project(":common").sourceSets.main.output
    include "com/stevekung/fishofthieves/api/**/*"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    archiveClassifier = "api"
}

artifacts {
    archives apiJar
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric" + (release_type != "release" ? "-${release_type}" : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}