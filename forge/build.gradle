architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfigs = ["mixins.fishofthieves.json", "mixins.fishofthieves_forge.json"]

        mixin {
            defaultRefmapName = "mixins.fishofthieves_forge.refmap.json"
        }

        dataGen {
            mod "fishofthieves"
        }
    }

    launches {
        if (project.hasProperty("username") && project.hasProperty("uuid")) {
            client {
                arg "--username", "${username}", "--uuid", "${uuid}"
            }
        }
        data {
            arg "--existing", file("../common/src/main/resources/").absolutePath
        }
    }

    runs {
        client {
            vmArg("-Dmixin.debug.export=true")
            vmArg("-Dmixin.hotSwap=true")
        }
        data {
            name "Forge Data Generation"
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name "Aquaculture 2"
        url "https://girafi.dk/maven/"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"

    api "com.teammetallurgy.aquaculture:aquaculture2_1.18.2:1.18.2-${aquaculture_version}:api"

    modRuntimeOnly "curse.maven:configured-457570:${configured_version}"
    modRuntimeOnly "curse.maven:catalogue-459701:${catalogue_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

String fileName = "${archives_base_name}-mc${mc_version}"

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
    excludes = [".cache", "data/fabric/**"]
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "568372"
            changelog = file("../CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "beta"
            addGameVersion "Forge"
            addGameVersion "Java 17"
            addGameVersion project.mc_version

            mainArtifact(remapJar.archiveFile) {
                displayName = "[Forge] " + fileName + "-v${project.version}"
            }
            relations {
                optionalDependency "configured"
            }
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.dependencies.DependencyType

modrinth {
    if (project.hasProperty("modrinth_api_token")) {
        token = project.modrinth_api_token
        projectId = "BzOTnuqM"
        changelog = file("../CHANGE_LOG.md").text
        versionName = "[Forge] Fish of Thieves " + "v${project.version}" + " for Minecraft " + project.mc_version
        versionNumber = project.mod_version + "-forge"
        versionType = "release"
        uploadFile = remapJar
        gameVersions = ["${project.mc_version}"]
        loaders = ["forge"]
        dependencies = [
                new ModDependency("9s6osm5g", DependencyType.REQUIRED) // Cloth Config
        ]
    }
}

task curseforgeModrinth(dependsOn: [ build, "modrinth", "curseforge" ], group: "upload")