apply from: "https://raw.githubusercontent.com/SteveKunG/GradleScripts/main/architectury/forge.gradle"

loom {
    runs.configureEach {
        properties project.commonProperties
        vmArgs project.commonVmArgs
        vmArgs project.hotswapVmArgs
    }

    forge {
        mixinConfig("mixins.${archives_base_name}_forge.json")

        mixin {
            useLegacyMixinAp = true
            defaultRefmapName = "mixins.${archives_base_name}_forge.refmap.json"
        }
    }

    runs {
        client {
            if (project.hasProperty("usernameAndUUID")) {
                programArgs project.usernameAndUUID
            }
        }
        data {
            forgeTemplate("data")
            environment "data"
            programArgs "--mod=fishofthieves", "--all", "--output=" + file("src/generated/resources/"), "--existing=" + project(":common").file("src/main/resources/")
            name "Forge Data Generation"
        }
    }
}

repositories {
    maven {
        name "Aquaculture 2"
        url "https://girafi.dk/maven/"
        content {
            includeGroup "com.teammetallurgy.aquaculture"
        }
    }
}

dependencies {
    api "com.teammetallurgy.aquaculture:aquaculture2_1.19.4:${aquaculture_version}:api"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixinextras_version}"))
}

String fileName = "${archives_base_name}-mc${minecraft_version}"
List<String> commonExcludes = [".cache", "**/datagen/", "data/fabric/**", "data/immersive_weathering/**", "**/freeze_immune_entity_types.json", "architectury.common.json"]

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    excludes = commonExcludes
}

sourcesJar {
    Jar commonSources = project(":common").sourcesJar
    dependsOn commonSources
    commonSources.exclude ".cache"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
    excludes = commonExcludes
}

tasks.register("apiJar", Jar) {
    group "build"
    from project(":common").sourceSets.main.allJava
    from project(":common").sourceSets.main.output
    include "com/stevekung/fishofthieves/api/**/*"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    archiveClassifier = "api"
}

artifacts {
    archives apiJar
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge" + (release_type != "release" ? "-" + release_type : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}