apply from: "https://raw.githubusercontent.com/SteveKunG/GradleScripts/main/architectury/forge.gradle"

loom {
    runs.configureEach {
        properties project.commonProperties
        vmArgs project.commonVmArgs
        vmArgs project.hotswapVmArgs
    }

    runs {
        client {
            if (project.hasProperty("usernameAndUUID")) {
                programArgs project.usernameAndUUID
            }
        }
        data {
            forgeTemplate("data")
            environment "data"
            programArgs "--mod=fishofthieves", "--all", "--output=" + file("src/generated/resources/"), "--existing=" + project(":common").file("src/main/resources/")
            name "Forge Data Generation"
        }
    }
}

repositories {
    maven {
        name "Aquaculture 2"
        url "https://girafi.dk/maven/"
        content {
            includeGroup "com.teammetallurgy.aquaculture"
        }
    }
}

dependencies {
    api "com.teammetallurgy.aquaculture:aquaculture2_1.19.4:${aquaculture_version}:api"
}

String fileName = "${archives_base_name}-mc${minecraft_version}"
List<String> commonExcludes = [".cache", "**/datagen/", "data/fabric/**", "data/immersive_weathering/**", "**/freeze_immune_entity_types.json", "architectury.common.json"]

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    excludes = commonExcludes
}

sourcesJar {
    Jar commonSources = project(":common").sourcesJar
    dependsOn commonSources
    commonSources.exclude ".cache"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
    excludes = commonExcludes
}

tasks.register("apiJar", Jar) {
    group "build"
    from project(":common").sourceSets.main.allJava
    from project(":common").sourceSets.main.output
    include "com/stevekung/fishofthieves/api/**/*"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    archiveClassifier = "api"
}

artifacts {
    archives apiJar
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge" + (release_type != "release" ? "-" + release_type : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? curseforge_api_token : ""
    project {
        id = "568372"
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = project.release_type
        addGameVersion "Forge"
        addGameVersion "Java ${java_version}"
        addGameVersion project.minecraft_version

        mainArtifact(remapJar.archiveFile) {
            it.displayName = "[Forge ${project.minecraft_version}] Fish of Thieves v${mod_version}"
        }
        relations {
            it.requiredDependency "cloth-config"
            it.optionalDependency "configured"
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
        addArtifact shadowJar
        addArtifact remapSourcesJar
        addArtifact apiJar
    }
    options {
        debug = debug_upload
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = debug_upload as boolean
    token = project.hasProperty("modrinth_api_token") ? modrinth_api_token : ""
    projectId = "fish-of-thieves"
    changelog = rootProject.file("CHANGE_LOG.md").text
    syncBodyFrom = rootProject.file("README.md").text
    versionName = "[Forge ${project.minecraft_version}] Fish of Thieves v${mod_version}"
    versionNumber = project.mod_version + "-forge"
    versionType = project.release_type
    uploadFile = remapJar
    additionalFiles = [shadowJar, remapSourcesJar, apiJar]
    gameVersions = ["${minecraft_version}"]
    loaders = ["forge"]
    dependencies {
        required.project "cloth-config"
    }
}