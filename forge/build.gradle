plugins {
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfigs = ["mixins.fishofthieves.json", "mixins.fishofthieves_forge.json"]

        mixin {
            defaultRefmapName = "mixins.fishofthieves_forge.refmap.json"
        }

        dataGen {
            mod "fishofthieves"
        }
    }

    launches {
        if (project.hasProperty("username") && project.hasProperty("uuid")) {
            client {
                arg "--username", "${username}", "--uuid", "${uuid}"
            }
        }
        data {
            arg "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }

    runs {
        client {
            property "mixin.debug.export", "true"
            property "mixin.hotSwap", "true"
        }
        data {
            name "Forge Data Generation"
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name "Aquaculture 2"
        url "https://girafi.dk/maven/"
        content {
            includeGroup "com.teammetallurgy.aquaculture"
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"

    api "com.teammetallurgy.aquaculture:aquaculture2_${mc_version}:${mc_version}-${aquaculture_version}:api"

    modRuntimeOnly "curse.maven:configured-457570:${configured_version}"
    modRuntimeOnly "curse.maven:catalogue-459701:${catalogue_version}"
    modRuntimeOnly "curse.maven:lazy-dfu-forge-460819:3544496"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

String fileName = "${archives_base_name}-mc${mc_version}"
def fabricExcludes = [".cache", "data/fabric/**", "data/immersive_weathering/**", "**/freeze_immune_entity_types.json"]

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    excludes = fabricExcludes
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    commonSources.exclude ".cache"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
    excludes = fabricExcludes
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge" + (project.release_type != "release" ? "-" + project.release_type : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// TODO Enable when hot swapping working on Forge -.-
/*tasks.getByName("configureLaunch") {
    doFirst {
        loom {
            runs {
                def mixinJarFile = configurations.compileClasspath.files { it.name == "mixin-patched" }.find { true }

                client {
                    vmArg("-javaagent:$mixinJarFile")
                }
                server {
                    vmArg("-javaagent:$mixinJarFile")
                }
            }
        }
    }
}*/

def uploadDebug = true

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? project.curseforge_api_token : ""
    project {
        id = "568372"
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = project.release_type
        addGameVersion "Forge"
        addGameVersion "Java 17"
        addGameVersion project.mc_version

        mainArtifact(remapJar.archiveFile) {
            it.displayName = "[Forge] " + fileName + "-v${mod_version}"
        }
        relations {
            it.requiredDependency "cloth-config"
            it.optionalDependency "configured"
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
        addArtifact shadowJar
        addArtifact remapSourcesJar
    }
    options {
        debug uploadDebug
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = uploadDebug
    token = project.hasProperty("modrinth_api_token") ? project.modrinth_api_token : ""
    projectId = "fish-of-thieves"
    changelog = rootProject.file("CHANGE_LOG.md").text
    syncBodyFrom = rootProject.file("README.md").text
    versionName = "[Forge] Fish of Thieves " + "v${mod_version}" + " for Minecraft " + project.mc_version
    versionNumber = project.mod_version + "-forge"
    versionType = project.release_type
    uploadFile = remapJar
    additionalFiles = [shadowJar, remapSourcesJar]
    gameVersions = ["${mc_version}"]
    loaders = ["forge"]
    dependencies {
        required.project "cloth-config"
        // optional.project "configured" TODO Enable when "Configured" mod is on Modrinth, Thank you Emmaffle!
    }
}